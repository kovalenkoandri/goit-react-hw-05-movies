{"version":3,"file":"static/js/219.8620896c.chunk.js","mappings":"wRACaA,EAAUC,EAAAA,GAAAA,IAAH,yCAGPC,EAAWD,EAAAA,GAAAA,GAAH,2CAGRE,EAAeF,EAAAA,GAAAA,GAAH,2CAGZG,EAAWH,EAAAA,GAAAA,EAAH,6C,SCgCrB,EAtCa,WACX,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,iGAEDC,EAAAA,EAAAA,IAAgBD,GAAOE,MAAK,SAAAC,GACjD,OAAOA,EAAaC,KAAKC,KAAKC,QAAO,SAACC,EAAGC,GAAJ,OAAYA,EAAM,CAAlB,GACtC,IAJuB,OAElBC,EAFkB,OAKxBd,GAAU,OAAIc,IALU,gDAOxBC,QAAQC,MAAR,MAPwB,yDAAH,sDAUzBZ,EAAoBH,EACrB,GAAE,CAACA,KAEF,8BACE,SAACN,EAAD,UACGI,EAAOkB,OAAS,EACblB,EAAOmB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACpC,OACE,UAAC1B,EAAD,YACE,SAACH,EAAD,CACE8B,IAAG,yCAAoCH,GACvCI,IAAKH,KAEP,SAACxB,EAAD,UAAWwB,KACX,SAACxB,EAAD,UAAWyB,MANMH,EAStB,IACD,4BAIX,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import styled from 'styled-components';\nexport const ImgCast = styled.img`\n  width: 100px;\n`;\nexport const ListCast = styled.ul`\nlist-style: none;\n`;\nexport const ListItemCast = styled.li`\nmargin=top: 10px;\n`;\nexport const TextCast = styled.p`\n  margin=top: 10px;\n`;\n","import { getMovieCredits } from 'components/services/api';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ImgCast, ListCast, ListItemCast, TextCast } from 'components/Cast/Cast.styled';\nconst Cast = () => {\n  const [casted, setCasted] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const getMovieCreditsHttp = async input => {\n      try {\n        const response = await getMovieCredits(input).then(responseHttp => {\n          return responseHttp.data.cast.filter((_, idx) => idx < 3);\n        });\n        setCasted([...response]);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    getMovieCreditsHttp(movieId);\n  }, [movieId]);\n  return (\n    <section>\n      <ListCast>\n        {casted.length > 0\n          ? casted.map(({ id, profile_path, name, character }) => {\n              return (\n                <ListItemCast key={id}>\n                  <ImgCast\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                  />\n                  <TextCast>{name}</TextCast>\n                  <TextCast>{character}</TextCast>\n                </ListItemCast>\n              );\n            })\n          : 'no casted actors found'}\n      </ListCast>\n    </section>\n  );\n};\n\nexport default Cast;"],"names":["ImgCast","styled","ListCast","ListItemCast","TextCast","useState","casted","setCasted","movieId","useParams","useEffect","getMovieCreditsHttp","input","getMovieCredits","then","responseHttp","data","cast","filter","_","idx","response","console","error","length","map","id","profile_path","name","character","src","alt"],"sourceRoot":""}